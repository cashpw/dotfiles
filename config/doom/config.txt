                          ____________________

                           EMACS CONFIG: BASE

                              Cash Weaver
                          ____________________


Table of Contents
_________________

1. Introduction
.. 1. Example of Literate Programming
.. 2. Tangled Files
..... 1. Work                                                     :work:
.. 3. Function and Variable Naming Convention
2. Doom Emacs
.. 1. Configuration File headers
.. 2. `init.el'
3. General
.. 1. User Information
.. 2. Home Directory
.. 3. `cashweaver-is-work-p'
4. Theme and Visual
5. Dates and time
.. 1. Utility functions
6. Packages
.. 1. `aggressive-indent'
..... 1. Package
.. 2. `calfw'
..... 1. Package
..... 2. Config
.. 3. `doct' ([Declarative Org Capture Template])
..... 1. Package
..... 2. Config
.. 4. `free-keys'
..... 1. Package
..... 2. Config
.. 5. `gnus-alias'
..... 1. Package
..... 2. Config
.. 6. `langtool'
..... 1. Package
..... 2. `LanguageTool'
..... 3. Config
.. 7. `writegood-mode'
..... 1. Package
.. 8. `notmuch'
..... 1. Package
..... 2. Config
.. 9. `operate-on-number'
..... 1. Package
..... 2. Config
.. 10. `org-gcal'
..... 1. Package
.. 11. `org-mime'
..... 1. Package
..... 2. Config
.. 12. `org-mode'
..... 1. General
..... 2. Agenda
..... 3. Publish
..... 4. Helper Methods
.. 13. `org-noter'
..... 1. Package
..... 2. Config
.. 14. `org-notmuch'
..... 1. Package
..... 2. Config
.. 15. `org-roam'
..... 1. Package
..... 2. Config
.. 16. `org-super-agenda'
..... 1. Package
.. 17. `ox-pandoc'
..... 1. Package
.. 18. `pdf-tools'
..... 1. Package
..... 2. Config
.. 19. `alert'
..... 1. Package
..... 2. Config
.. 20. `ox-hugo'
..... 1. Package
..... 2. Config
.. 21. `org-wild-notifier'
..... 1. Package
..... 2. Config
7. Mail
8. Key bindings
.. 1. General
.. 2. `org-mode'
.. 3. `notmuch'
9. Load Additional Config Files
.. 1. `config-work.el'
.. 2. `packages-work.el'


This is my Emacs configuration file; written in [`org-mode'] in literate
programming style and based heavily on the work of others[1].


[`org-mode'] <https://orgmode.org>


1 Introduction
==============

1.1 Example of Literate Programming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  As an example of literate programming with `org-mode', let's generate
  a throw-away file, `foo.md'. First, we'll add the title:

  ,----
  | # Foo
  `----

  Notice that I specified the syntax (`md') and the file to output the
  content to (`foo.md'). Next, let's add a list of my favorite colors.

  ,----
  | 1. Orange
  | 1. Blue
  | 1. Red
  `----

  Now we can run `org-babel-tangle' to extract the content of these two
  blocks and create `foo.md'. The newly generated `foo.md' will contain:

  ,----
  | # Foo
  | 
  | 1. Orange
  | 1. Blue
  | 1. Red
  `----


1.2 Tangled Files
~~~~~~~~~~~~~~~~~

  This single file tangles the following files:

  - `init.el' defines which of the existing Doom [modules] are loaded. A
    Doom module is a bundle of packages, configuration, and commands
    which are organized into a unit that can be toggled easily from this
    file.
  - `packages.el' defines which [packages] should be installed, beyond
    those that are installed and loaded as part of the enabled modules.
  - `config.el' contains all [custom configuration] and code.


[modules]
<https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules>

[packages]
<https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management>

[custom configuration]
<https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom>

1.2.1 Work                                                        :work:
----------

  - `packages-work.el': A version of `packages.el' which contains
    packages for my work environment.
  - `config-work.el': A version of `config.el' which contains
    configuration for my work environment.


1.3 Function and Variable Naming Convention
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  I prefix all of my own functions and variables with `cashweaver-' to
  prevent any unintentional overlaps.

  ,----
  | (setq
  |  cashweaver-favorite-color "orange")
  `----

  "Private" functions and variables -- those I wouldn't indend to be
  accessed directly -- are prefixed with `cashweaver--' (note the two
  `-''s).

  ,----
  | (setq
  |  cashweaver--secret-color "blue")
  `----

  Additionally, variables and functions which are in a "library"/group
  are prefixed with either `cashweaver-<library name>-' or
  `cashweaver-<library name>--', depending on their intended visibility.

  ,----
  | (setq
  |  cashweaver-colors-favorite "orange"
  |  cashweaver-colors--secret "blue")
  `----


2 Doom Emacs
============

  I use [Doom Emacs] as the base for my configuration to save time and
  get to coding faster than I would if I had to roll my entire config
  from scratch.


[Doom Emacs] <https://github.com/hlissner/doom-emacs>

2.1 Configuration File headers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  There is some boilerplate which is present in the configuration files
  when you first create them using `doom install' which I like to
  preserve.

  ,----
  | ;;; init.el -*- lexical-binding: t; -*-
  | 
  | ;; DO NOT EDIT THIS FILE MANUALLY.
  | ;; This file is generated from doom.md. You should make your changes there and
  | ;; this file using org-babel-tangle.
  | 
  | ;; This file controls what Doom modules are enabled and what order they load
  | ;; in. Remember to run 'doom sync' after modifying it!
  | 
  | ;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
  | ;;      documentation. There you'll find a "Module Index" link where you'll find
  | ;;      a comprehensive list of Doom's modules and what flags they support.
  | 
  | ;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
  | ;;      'C-c c k' for non-vim users) to view its documentation. This works on
  | ;;      flags as well (those symbols that start with a plus).
  | ;;
  | ;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
  | ;;      directory (for easy access to its source code).
  `----
  ,----
  | ;; -*- no-byte-compile: t; -*-
  | ;;; $DOOMDIR/packages.el
  | 
  | ;; DO NOT EDIT THIS FILE MANUALLY.
  | ;; This file is generated from doom.md. You should make your changes there and
  | ;; this file using org-babel-tangle.
  | 
  | ;; To install a package with Doom you must declare them here and run 'doom sync'
  | ;; on the command line, then restart Emacs for the changes to take effect -- or
  | ;; use 'M-x doom/reload'.
  | 
  | 
  | ;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
  | ;(package! some-package)
  | 
  | ;; To install a package directly from a remote git repo, you must specify a
  | ;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
  | ;; https://github.com/raxod502/straight.el#the-recipe-format
  | ;(package! another-package
  | ;  :recipe (:host github :repo "username/repo"))
  | 
  | ;; If the package you are trying to install does not contain a PACKAGENAME.el
  | ;; file, or is located in a subdirectory of the repo, you'll need to specify
  | ;; `:files' in the `:recipe':
  | ;(package! this-package
  | ;  :recipe (:host github :repo "username/repo"
  | ;           :files ("some-file.el" "src/lisp/*.el")))
  | 
  | ;; If you'd like to disable a package included with Doom, you can do so here
  | ;; with the `:disable' property:
  | ;(package! builtin-package :disable t)
  | 
  | ;; You can override the recipe of a built in package without having to specify
  | ;; all the properties for `:recipe'. These will inherit the rest of its recipe
  | ;; from Doom or MELPA/ELPA/Emacsmirror:
  | ;(package! builtin-package :recipe (:nonrecursive t))
  | ;(package! builtin-package-2 :recipe (:repo "myfork/package"))
  | 
  | ;; Specify a `:branch' to install a package from a particular branch or tag.
  | ;; This is required for some packages whose default branch isn't 'master' (which
  | ;; our package manager can't deal with; see raxod502/straight.el#279)
  | ;(package! builtin-package :recipe (:branch "develop"))
  | 
  | ;; Use `:pin' to specify a particular commit to install.
  | ;(package! builtin-package :pin "1a2b3c4d5e")
  | 
  | 
  | ;; Doom's packages are pinned to a specific commit and updated from release to
  | ;; release. The `unpin!' macro allows you to unpin single packages...
  | ;(unpin! pinned-package)
  | ;; ...or multiple packages
  | ;(unpin! pinned-package another-pinned-package)
  | ;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
  | ;(unpin! t)
  `----
  ,----
  | ;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
  | 
  | ;; DO NOT EDIT THIS FILE MANUALLY.
  | ;; This file is generated from doom.md. You should make your changes there and
  | ;; this file using org-babel-tangle.
  | 
  | ;; Place your private configuration here! Remember, you do not need to run 'doom
  | ;; sync' after modifying this file!
  | 
  | 
  | ;; Some functionality uses this to identify you, e.g. GPG configuration, email
  | ;; clients, file templates and snippets.
  | ; (setq user-full-name "John Doe"
  | ;       user-mail-address "john@doe.com")
  | 
  | ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
  | ;; are the three important ones:
  | ;;
  | ;; + `doom-font'
  | ;; + `doom-variable-pitch-font'
  | ;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
  | ;;   presentations or streaming.
  | ;;
  | ;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
  | ;; font string. You generally only need these two:
  | ;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
  | ;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
  | 
  | ;; There are two ways to load a theme. Both assume the theme is installed and
  | ;; available. You can either set `doom-theme' or manually load a theme with the
  | ;; `load-theme' function. This is the default:
  | ; (setq doom-theme 'doom-one)
  | 
  | ;; If you use `org' and don't want your org files in the default location below,
  | ;; change `org-directory'. It must be set before org loads!
  | ; (setq org-directory "~/org/")
  | 
  | ;; This determines the style of line numbers in effect. If set to `nil', line
  | ;; numbers are disabled. For relative line numbers, set this to `relative'.
  | ; (setq display-line-numbers-type t)
  | 
  | 
  | ;; Here are some additional functions/macros that could help you configure Doom:
  | ;;
  | ;; - `load!' for loading external *.el files relative to this one
  | ;; - `use-package!' for configuring packages
  | ;; - `after!' for running code after a package has loaded
  | ;; - `add-load-path!' for adding directories to the `load-path', relative to
  | ;;   this file. Emacs searches the `load-path' when you load packages with
  | ;;   `require' or `use-package'.
  | ;; - `map!' for binding new keys
  | ;;
  | ;; To get information about any of these functions/macros, move the cursor over
  | ;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
  | ;; This will open documentation for it, including demos of how they are used.
  | ;;
  | ;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
  | ;; they are implemented.
  `----


2.2 `init.el'
~~~~~~~~~~~~~

  ,----
  | (doom!
  |  :input
  |  <<doom-input>>
  | 
  |  :completion
  |  <<doom-completion>>
  | 
  |  :ui
  |  <<doom-ui>>
  | 
  |  :editor
  |  <<doom-editor>>
  | 
  |  :emacs
  |  <<doom-emacs>>
  | 
  |  :term
  |  <<doom-term>>
  | 
  |  :checkers
  |  <<doom-checkers>>
  | 
  |  :tools
  |  <<doom-tools>>
  | 
  |  :os
  |  <<doom-os>>
  | 
  |  :lang
  |  <<doom-lang>>
  | 
  |  :email
  |  <<doom-email>>
  | 
  |  :app
  |  <<doom-app>>
  | 
  |  :config
  |  <<doom-config>>
  |  )
  `----
  ,----
  |  ;;chinese
  |  ;;japanese
  |  ;;layout            ; auie,ctsrnm is the superior home row
  `----
  ,----
  |  company             ; the ultimate code completion backend
  |  ;;helm              ; the *other* search engine for love and life
  |  ;;ido               ; the other *other* search engine...
  |  ivy                 ; a search engine for love and life
  `----
  ,----
  |  ;;deft              ; notational velocity for Emacs
  |  doom                ; what makes DOOM look the way it does
  |  doom-dashboard      ; a nifty splash screen for Emacs
  |  doom-quit           ; DOOM quit-message prompts when you quit Emacs
  |  (emoji              ; 🙂
  |   +ascii
  |   +github
  |   +unicode)
  |  ;;fill-column       ; a `fill-column' indicator
  |  hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
  |  ;;hydra
  |  ;;indent-guides     ; highlighted indent columns
  |  ;;ligatures         ; ligatures and symbols to make your code pretty again
  |  ;;minimap           ; show a map of the code on the side
  |  modeline            ; snazzy, Atom-inspired modeline, plus API
  |  ;;nav-flash         ; blink cursor line after big motions
  |  ;;neotree           ; a project drawer, like NERDTree for vim
  |  ophints             ; highlight the region an operation acts on
  |  (popup +defaults)   ; tame sudden yet inevitable temporary windows
  |  ;;tabs              ; a tab bar for Emacs
  |  ;;treemacs          ; a project drawer, like neotree but cooler
  |  unicode             ; extended unicode support for various languages
  |  vc-gutter          ; vcs diff in the fringe
  |  vi-tilde-fringe     ; fringe tildes to mark beyond EOB
  |  ;;window-select     ; visually switch windows
  |  workspaces          ; tab emulation, persistence & separate workspaces
  |  ;;zen               ; distraction-free coding or writing
  `----
  ,----
  |  (evil +everywhere)  ; come to the dark side, we have cookies
  |  file-templates      ; auto-snippets for empty files
  |  fold                ; (nigh) universal code folding
  |  ;;(format +onsave)  ; automated prettiness
  |  ;;god               ; run Emacs commands without modifier keys
  |  ;;lispy             ; vim for lisp, for people who don't like vim
  |  ;;multiple-cursors  ; editing in many places at once
  |  ;;objed             ; text object editing for the innocent
  |  ;;parinfer          ; turn lisp into python, sort of
  |  ;;rotate-text       ; cycle region at point between text candidates
  |  snippets            ; my elves. They type so I don't have to
  |  ;;word-wrap         ; soft wrapping with language-aware indent
  `----
  ,----
  |  dired               ; making dired pretty [functional]
  |  electric            ; smarter, keyword-based electric-indent
  |  ;;ibuffer           ; interactive buffer management
  |  undo                ; persistent, smarter undo for your inevitable mistakes
  |  vc                  ; version-control and Emacs, sitting in a tree
  `----
  ,----
  |  ;;eshell            ; the elisp shell that works everywhere
  |  ;;shell             ; simple shell REPL for Emacs
  |  ;;term              ; basic terminal emulator for Emacs
  |  vterm               ; the best terminal emulation in Emacs
  `----
  ,----
  | ;; tasing you for every semicolon you forget
  | syntax
  | ;; tasing you for misspelling mispelling
  | (spell
  |  +flyspell
  |  +everywhere)
  | ;; tasing grammar mistake every you make
  | grammar
  `----
  ,----
  |  ;;ansible
  |  ;;debugger          ; FIXME stepping through code, to help you add bugs
  |  ;;direnv
  |  ;;docker
  |  ;;editorconfig      ; let someone else argue about tabs vs spaces
  |  ;;ein               ; tame Jupyter notebooks with emacs
  |  (eval +overlay)     ; run code, run (also, repls)
  |  ;;gist              ; interacting with github gists
  |  lookup              ; navigate your code and its documentation
  |  ;;lsp
  |  magit               ; a git porcelain for Emacs
  |  ;;make              ; run make tasks from Emacs
  |  ;;pass              ; password manager for nerds
  |  pdf               ; pdf enhancements
  |  ;;prodigy           ; FIXME managing external services & code builders
  |  ;;rgb               ; creating color strings
  |  ;;taskrunner        ; taskrunner for all your projects
  |  ;;terraform         ; infrastructure as code
  |  ;;tmux              ; an API for interacting with tmux
  |  ;;upload            ; map local to remote projects via ssh/ftp
  `----
  ,----
  |  (:if IS-MAC macos)  ; improve compatibility with macOS
  |  ;;tty               ; improve the terminal Emacs experience
  `----
  ,----
  |  ;;agda              ; types of types of types of types...
  |  ;;cc                ; C/C++/Obj-C madness
  |  ;;clojure           ; java with a lisp
  |  ;;common-lisp       ; if you've seen one lisp, you've seen them all
  |  ;;coq               ; proofs-as-programs
  |  ;;crystal           ; ruby at the speed of c
  |  ;;csharp            ; unity, .NET, and mono shenanigans
  |  ;;data              ; config/data formats
  |  ;;(dart +flutter)   ; paint ui and not much else
  |  ;;elixir            ; erlang done right
  |  ;;elm               ; care for a cup of TEA?
  |  emacs-lisp          ; drown in parentheses
  |  ;;erlang            ; an elegant language for a more civilized age
  |  ;;ess               ; emacs speaks statistics
  |  ;;faust             ; dsp, but you get to keep your soul
  |  ;;fsharp            ; ML stands for Microsoft's Language
  |  ;;fstar             ; (dependent) types and (monadic) effects and Z3
  |  ;;gdscript          ; the language you waited for
  |  ;;(go +lsp)         ; the hipster dialect
  |  ;;(haskell +dante)  ; a language that's lazier than I am
  |  ;;hy                ; readability of scheme w/ speed of python
  |  ;;idris             ; a language you can depend on
  |  ;;json              ; At least it ain't XML
  |  java                ; the poster child for carpal tunnel syndrome
  |  javascript          ; all(hope(abandon(ye(who(enter(here))))))
  |  ;;julia             ; a better, faster MATLAB
  |  ;;kotlin            ; a better, slicker Java(Script)
  |  ;;latex             ; writing papers in Emacs has never been so fun
  |  ;;lean
  |  ;;factor
  |  ;;ledger            ; an accounting system in Emacs
  |  ;;lua               ; one-based indices? one-based indices
  |  markdown            ; writing docs for people to ignore
  |  ;;nim               ; python + lisp at the speed of c
  |  ;;nix               ; I hereby declare "nix geht mehr!"
  |  ;;ocaml             ; an objective camel
  |  (org                ; organize your plain life in plain text
  |   +noter
  |   +pretty
  |   +roam2
  |   +pandoc
  |   +pomodoro)
  |  ;;php               ; perl's insecure younger brother
  |  ;;plantuml          ; diagrams for confusing people more
  |  ;;purescript        ; javascript, but functional
  |  python              ; beautiful is better than ugly
  |  ;;qt                ; the 'cutest' gui framework ever
  |  ;;racket            ; a DSL for DSLs
  |  ;;raku              ; the artist formerly known as perl6
  |  ;;rest              ; Emacs as a REST client
  |  ;;rst               ; ReST in peace
  |  ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
  |  ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
  |  ;;scala             ; java, but good
  |  ;;scheme            ; a fully conniving family of lisps
  |  sh                  ; she sells {ba,z,fi}sh shells on the C xor
  |  ;;sml
  |  ;;solidity          ; do you need a blockchain? No.
  |  ;;swift             ; who asked for emoji variables?
  |  ;;terra             ; Earth and Moon in alignment for performance.
  |  ;;web               ; the tubes
  |  yaml                ; JSON, but readable
  `----
  ,----
  |  ;;(mu4e +gmail)
  |  notmuch
  |  ;;(wanderlust +gmail)
  `----
  ,----
  |  ;;calendar
  |  ;;emms
  |  everywhere
  |  ;;irc               ; how neckbeards socialize
  |  ;;(rss +org)        ; emacs as an RSS reader
  |  ;;twitter           ; twitter client https://twitter.com/vnought
  `----
  ,----
  |  ;;literate
  |  (default +bindings +smartparens)
  `----


3 General
=========

3.1 User Information
~~~~~~~~~~~~~~~~~~~~

  ,----
  | (setq
  |  user-full-name "Cash Weaver"
  |  user-mail-address "cashweaver@google.com")
  `----


3.2 Home Directory
~~~~~~~~~~~~~~~~~~

  ,----
  | (setq
  |  cashweaver-home-dir-home
  |  "/home/cashweaver"
  |  cashweaver-home-dir-work
  |  "/usr/local/google/home/cashweaver")
  `----

  ,----
  | <<cashweaver-home-dir>>
  `----

  ,----
  | <<cashweaver-home-dir>>
  `----


3.3 `cashweaver-is-work-p'
~~~~~~~~~~~~~~~~~~~~~~~~~~

  This file contains the my base configuration for emacs. I have other
  config files, nameely `config-work.org', which extend this file for
  specific environments.

  ,----
  | (defvar
  |  cashweaver-work-config-dir
  |  (format
  |   "%s/%s"
  |   cashweaver-home-dir-work
  |   ".config/doom")
  |  "Full path to work Emacs cofiguration files.")
  `----

  ,----
  | (defun cashweaver-is-work-p ()
  |   "Return true if executed on my work machine."
  |   (file-directory-p cashweaver-work-config-dir))
  `----

  ,----
  | <<cashweaver-work-config-dir>>
  | <<cashweaver-is-work-p>>
  `----

  ,----
  | <<cashweaver-work-config-dir>>
  | <<cashweaver-is-work-p>>
  `----


4 Theme and Visual
==================

  ,----
  | (setq
  |  doom-theme 'doom-tomorrow-night
  |  show-trailing-whitespace t)
  `----


5 Dates and time
================

  ,----
  | (setq
  |  ;; Use YYYY-MM-DD date format.
  |  calendar-date-style 'iso)
  `----


5.1 Utility functions
~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (defun cashweaver-get-date (&optional date-format offset-days)
  |   "Return the (offset) date in format."
  |   (interactive)
  |   (let ((date-format (or date-format "%Y-%m-%d"))
  |         (offset-days (or offset-days 0)))
  |     (shell-command-to-string
  |      (format "echo -n $(date \"+%s\" --date=\"%d days\")" date-format offset-days))))
  | 
  | (defun cashweaver-todays-date ()
  |   "Return todays date as YYYY-MM-DD."
  |   (cashweaver-get-date
  |    ; date-format
  |    "%Y-%m-%d"
  |    ; offset-days
  |    0))
  | 
  | (defun cashweaver-yesterdays-date ()
  |   "Return yesterday's date as YYYY-MM-DD."
  |   (cashweaver-get-date
  |    ; date-format
  |    "%Y-%m-%d"
  |    ; offset-days
  |    -1))
  `----


6 Packages
==========

  ,----
  | (defvar
  |   cashweaver--local-package-path
  |   (if (cashweaver-is-work-p)
  |       "/usr/local/google/home/cashweaver/third_party"
  |     "/home/cashweaver/third_party")
  |   "Path to local emacs package files.")
  `----


6.1 `aggressive-indent'
~~~~~~~~~~~~~~~~~~~~~~~

6.1.1 Package
-------------

  ,----
  | (package! aggressive-indent)
  `----


  ,----
  | (use-package! aggressive-indent
  |   :config
  |   (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode))
  `----


* 6.1.1.1 Work                                                    :work:

  ,----
  | (after! gnus-alias
  |   (setq
  |    gnus-alias-identity-alist '(("work"
  |                                 ;; Refers to
  |                                 nil
  |                                 "Cash Weaver <cashweaver@google.com>"
  |                                 ;; Organization
  |                                 nil
  |                                 ;; Extra headers
  |                                 nil
  |                                 ;; Body
  |                                 nil "~/.email_signature"))
  |    gnus-alias-default-identity "work"))
  `----


6.2 `calfw'
~~~~~~~~~~~

6.2.1 Package
-------------

  Provided through `app/calendar' in `init.el'.


6.2.2 Config
------------

  ,----
  | ;(use-package! calfw-cal
  | ;  :config
  | ;  (setq
  | ;   ; Start the week on Monday
  | ;   calendar-week-start-day 1))
  | ;
  | ;(use-package! calfw-ical)
  | ;(use-package! calfw-org)
  | ;
  | ;(defun cashweaver-calfw-open ()
  | ;  "Open my calendar"
  | ;  (interactive)
  | ;  (cfw:open-calendar-buffer
  | ;   :contents-sources
  | ;   (list
  | ;    (cfw:org-create-source "Green"))))
  `----


6.3 `doct' ([Declarative Org Capture Template])
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[Declarative Org Capture Template] <https://github.com/progfolio/doct>

6.3.1 Package
-------------

  ,----
  | (package! doct)
  `----


6.3.2 Config
------------

  ,----
  | (use-package! doct
  |   :commands (doct))
  `----


6.4 `free-keys'
~~~~~~~~~~~~~~~

6.4.1 Package
-------------

  ,----
  | (package! free-keys
  |   :recipe (:host github
  |            :repo "Fuco1/free-keys"))
  `----


6.4.2 Config
------------

  ,----
  | (use-package! free-keys)
  `----


6.5 `gnus-alias'
~~~~~~~~~~~~~~~~

6.5.1 Package
-------------

  ,----
  | (package! gnus-alias)
  `----


6.5.2 Config
------------

  ,----
  | (use-package! gnus-alias
  |   :config
  |   (autoload 'gnus-alias-determine-identity "gnus-alias" "" t)
  |   (gnus-alias-init))
  `----


* 6.5.2.1 Work                                                    :work:

  ,----
  | (after! gnus-alias
  |   (setq
  |    gnus-alias-identity-alist '(("work"
  |                                 ;; Refers to
  |                                 nil
  |                                 "Cash Weaver <cashweaver@google.com>"
  |                                 ;; Organization
  |                                 nil
  |                                 ;; Extra headers
  |                                 nil
  |                                 ;; Body
  |                                 nil "~/.email_signature"))
  |    gnus-alias-default-identity "work"))
  `----


6.6 `langtool'
~~~~~~~~~~~~~~

6.6.1 Package
-------------

  `langtool' is provided by `init.el'.


6.6.2 `LanguageTool'
--------------------

  Install `LanguageTool':

  A large number of angry people.

  1. Download the [latest stable build].
  2. Store it somewhere on your system.
  3. Configure `langtool-language-tool-server-jar'.


[latest stable build]
<https://languagetool.org/download/LanguageTool-stable.zip>


6.6.3 Config
------------

  ,----
  | (use-package! langtool
  |   :init
  |   (setq
  |    langtool-language-tool-server-jar
  |    "~/third_party/LanguageTool-5.5/languagetool-server.jar"
  |    ;;langtool-language-tool-jar
  |    ;;"~/third_party/LanguageTool-5.5/languagetool-commandline.jar"
  |    )
  |   :config
  |   (setq
  |    langtool-default-language
  |    "en-US"
  |    langtool-mother-tongue
  |    "en"))
  `----


6.7 `writegood-mode'
~~~~~~~~~~~~~~~~~~~~

6.7.1 Package
-------------

  `writegood-mode' is provided by `init.el'.


6.8 `notmuch'
~~~~~~~~~~~~~

6.8.1 Package
-------------

  `notmuch' is provided by `init.el'.


6.8.2 Config
------------

  ,----
  | (defun cashweaver-notmuch-show-open-or-close-all ()
  |   "Toggle between showing and hiding all messages in the thread."
  |   (interactive))
  | 
  | (defun cashweaver-notmuch--search-thread-has-tag-p (match-tag)
  |   "Whether or not the thread has a tag."
  |   (interactive)
  |   (let ((thread-tags (notmuch-search-get-tags)))
  |     (member match-tag thread-tags)))
  | 
  | (defun cashweaver-notmuch-search-toggle-tag (tag)
  |   "Toggle the provided tag."
  |   (interactive)
  |   (if (member tag (notmuch-search-get-tags))
  |       (notmuch-search-tag (list (concat "-" tag)))
  |     (notmuch-search-tag (list (concat "+" tag)))))
  | 
  | (defun cashweaver-notmuch--search-thread-toggle-tag (key)
  |   "Toggle the specified tag(s)."
  |   (interactive "k")
  |   (let ((tags (assoc key cashweaver-notmuch-tag-alist)))
  |     (apply 'notmuch-search-tag (cdr tags))))
  | 
  | (defun cashweaver-notmuch-search-super-archive (&optional beg end)
  |   "Super archive the selected thread; based on `notmuch-search-archive-thread'."
  |   (interactive (notmuch-interactive-region))
  |   (notmuch-search-tag cashweaver-notmuch-super-archive-tags beg end)
  |   (when (eq beg end)
  |     (notmuch-search-next-thread)))
  | 
  | (defun cashweaver-org-notmuch-capture-follow-up-mail()
  |   "Capture mail to org mode."
  |   (interactive)
  |   (org-store-link nil)
  |   (org-capture nil "ef"))
  | 
  | (after! notmuch
  |   (setq
  |    notmuch-wash-wrap-lines-length 100
  |    notmuch-saved-searches '((:name "inbox"
  |                              :key "i"
  |                              :query "tag:inbox")
  |                             (:name "p0"
  |                              :key "0"
  |                              :query "tag:p0")
  |                             (:name "bugs"
  |                              :key "b"
  |                              :query "tag:Bug AND tag:inbox")
  |                             (:name "bugs (all)"
  |                              :key "B"
  |                              :query "tag:Bug")
  |                             (:name "waiting"
  |                              :key "w"
  |                              :query "tag:waiting")
  |                             (:name "automated"
  |                              :key "a"
  |                              :query "tag:Automated AND tag:inbox")
  |                             (:name "to-read"
  |                              :key "r"
  |                              :query "tag:Read!")
  |                             (:name "sent"
  |                              :key "s"
  |                              :query "tag:sent")
  |                             (:name "drafts"
  |                              :key "d"
  |                              :query "tag:draft"))
  |    +notmuch-home-function (lambda ()
  |                             (notmuch-search "tag:inbox"))
  |    notmuch-archive-tags '("-inbox"
  |                           "-unread")
  |    notmuch-search-line-faces '(("p0" . '(:foreground "red3"))
  |                                ("Bug" . '(:foreground "ivory4"))
  |                                ("waiting" . '(:foreground "orange3"))
  |                                ("Calendar-Events" . '(:foreground "DeepSkyBlue3"))
  |                                ("Read!" . '(:foreground "magenta3")))
  |    ;; Superset of `notmuch-archive-tags' for super archiving.
  |    cashweaver-notmuch-super-archive-tags (append
  |                                           notmuch-archive-tags
  |                                           '("-p0"
  |                                             "-waiting"
  |                                             "-Read!")))
  | 
  |   ;; Prevent wrapping at 70 characters in email composition.
  |   (add-hook! 'message-mode-hook 'turn-off-auto-fill)
  |   (add-hook! 'message-mode-hook 'visual-line-mode))
  `----


6.9 `operate-on-number'
~~~~~~~~~~~~~~~~~~~~~~~

6.9.1 Package
-------------

  ,----
  | (package! operate-on-number
  |   :recipe (:host github
  |            :repo "knu/operate-on-number.el"))
  `----


6.9.2 Config
------------

  ,----
  | (use-package! operate-on-number)
  `----


6.10 `org-gcal'
~~~~~~~~~~~~~~~

6.10.1 Package
--------------

  ,----
  | (package! org-gcal)
  `----


6.11 `org-mime'
~~~~~~~~~~~~~~~

6.11.1 Package
--------------

  ,----
  | (package! org-mime)
  `----


6.11.2 Config
-------------

  ,----
  | (use-package! org-mime)
  `----


6.12 `org-mode'
~~~~~~~~~~~~~~~

6.12.1 General
--------------

  ,----
  | (setq
  |  cashweaver-org-non-archival-filepaths
  |  '())
  | 
  | (defun cashweaver-org-mode-when-done ()
  |   "Archive entry when it is marked as done (as defined by `org-done-keywords')."
  |   (when (org-entry-is-done-p)
  |     (org-clock-out-if-current)
  |     (unless (org-get-repeat)
  |       (unless
  |           (seq-contains-p
  |            cashweaver-org-non-archival-filepaths
  |            buffer-file-name)
  |         (org-archive-subtree-default)))))
  | 
  | (defun cashweaver-org-mode-when-inprogress ()
  |   "Handle inprogress ehavior"
  |   (when (string-equal (org-get-todo-state) "INPROGRESS")
  |     (org-clock-in)))
  | 
  | (after! org
  |   :config
  |   (setq
  |    org-ellipsis " ▾ "
  |    org-log-done 'time
  |    ;; Start the org agenda mini-calendar on Monday.
  |    calendar-week-start-day 1
  |    org-priority-highest 0
  |    org-priority-default 2
  |    org-priority-lowest 4
  |    org-hide-leading-stars t
  |    org-todo-keywords
  |    '((sequence
  |       ;; A task that needs doing & is ready to do
  |       "TODO(t)"
  |       ;; A project, which usually contains other tasks
  |       "PROJ(p)"
  |       ;; A task that is in progress
  |       "INPROGRESS(i)"
  |       ;; Something external is holding up this task
  |       "BLOCKED(b)"
  |       ;; This task is paused/on hold because of me
  |       "HOLD(h)"
  |       "|"
  |       ;; Task successfully completed
  |       "DONE(d)"
  |       ;; Task was moved
  |       "MOVE(m)"
  |       ;; Task was cancelled, aborted or is no longer applicable
  |       "KILL(k)")
  |      (sequence
  |       ;; A task that needs doing
  |       "[ ](T)"
  |       ;; Task is in progress
  |       "[-](S)"
  |       ;; Task is being held up or paused
  |       "[?](W)"
  |       "|"
  |       ;; Task was completed
  |       "[X](D)"))
  |    org-todo-keyword-faces
  |    '(("[-]"  . +org-todo-active)
  |      ("INPROGRESS" . +org-todo-active)
  |      ("[?]"  . +org-todo-onhold)
  |      ("BLKD" . +org-todo-onhold)
  |      ("HOLD" . +org-todo-onhold)
  |      ("PROJ" . +org-todo-project))
  |    org-structure-template-alist
  |    '(("a" . "export ascii")
  |      ("c" . "center")
  |      ("C" . "comment")
  |      ("e" . "example")
  |      ("E" . "export")
  |      ("Eh" . "export html")
  |      ("El" . "export latex")
  |      ("q" . "quote")
  |      ("s" . "src")
  |      ("se" . "src emacs-lisp")
  |      ("v" . "verse")))
  |   (add-hook!
  |    'org-after-todo-state-change-hook
  |    'cashweaver-org-mode-when-inprogress)
  |   (add-hook!
  |    'org-after-todo-state-change-hook
  |    'cashweaver-org-mode-when-done))
  `----


6.12.2 Agenda
-------------

  ,----
  | (after! org-agenda
  |   (setq
  |    org-agenda-skip-scheduled-if-deadline-is-shown t
  |    org-agenda-skip-scheduled-if-done t
  |    org-agenda-skip-scheduled-if-done t
  |    org-agenda-skip-deadline-if-done t
  |    org-agenda-include-deadlines t
  |    org-agenda-block-separator nil
  |    org-agenda-compact-blocks t
  |    org-agenda-start-day nil ;; i.e. today
  |    org-agenda-span 1
  |    org-agenda-start-on-weekday nil))
  `----


6.12.3 Publish
--------------

  ,----
  | (after! org
  |   (setq
  |    org-publish-project-alist
  |    '(("cashweaver.com"
  |       :base-directory "~/proj/blog-posts/posts/"
  |       :base-extension "org"
  |       :publishing-directory "~/proj/cashweaver.com/content/posts/"
  |       :publishing-function org-pandoc-publish-to-md
  |       :section-numbers t
  |       :with-toc nil))))
  | 
  `----


6.12.4 Helper Methods
---------------------

* 6.12.4.1 Create a heading for today

  ,----
  | (defun cashweaver-org-mode-insert-heading-for-today ()
  |   "Insert a heading for today's date, with relevant tags."
  |   (interactive)
  |   (let* ((today-week-number (cashweaver-get-date "%W"))
  |          (today-quarter-number (cashweaver-get-date "%q"))
  |          (today-year (cashweaver-get-date "%Y"))
  |          (today-month (cashweaver-get-date "%m"))
  |          (today-day (cashweaver-get-date "%d"))
  |          (today-weekday-name (cashweaver-get-date "%A")))
  |     (org-insert-heading-respect-content)
  |     (insert
  |      (format "%s-%s-%s %s :week%s:quarter%s:"
  |              today-year
  |              today-month
  |              today-day
  |              today-weekday-name
  |              today-week-number
  |              today-quarter-number))))
  | 
  | (defun cashweaver-org-mode-insert-heading-for-this-week ()
  |   "Insert a heading for this week, with relevant tags."
  |   (interactive)
  |   (let* ((today-week-number (cashweaver-get-date "%W"))
  |          (today-quarter-number (cashweaver-get-date "%q"))
  |          (today-year (cashweaver-get-date "%Y")))
  |     (org-insert-heading-respect-content)
  |     (insert
  |      (format "%s Week %s :week%s:quarter%s:"
  |              today-year
  |              today-week-number
  |              today-week-number
  |              today-quarter-number))))
  `----


* 6.12.4.2 Scheduling task for my calendar blocks

  ,----
  | (setq
  |  cashweaver--schedule-block-day '(:start "07:00" :end "19:00")
  |  cashweaver--schedule-block-one '(:start "07:00" :end "09:00")
  |  cashweaver--schedule-block-two '(:start "09:00" :end "11:00")
  |  cashweaver--schedule-block-three '(:start "14:00" :end "16:00")
  |  cashweaver--schedule-block-four '(:start "16:00" :end "18:00"))
  | 
  | (defun cashweaver-org-schedule-for-block (block-time &optional date)
  |   (interactive)
  |   (let ((start-time (plist-get block-time :start))
  |         (end-time (plist-get block-time :end))
  |         (date (or date "today")))
  |     (org-schedule nil (format "%s %s-%s"
  |                               date
  |                               start-time
  |                               end-time))))
  | 
  | (defun cashweaver-org-schedule-today-from-to (start-time end-time &optional date)
  |   (interactive)
  |   (let ((date (or date "today")))
  |     (org-schedule nil (format "%s %s-%s"
  |                               date
  |                               start-time
  |                               end-time))))
  `----


* 6.12.4.3 Schedule task

  ,----
  | (defun cashweaver-org--schedule-today-at (start-time-as-string)
  |   "Schedule a task today at the specified time."
  |   (interactive "sWhen?: ")
  |   (message start-time-as-string)
  |   (string-match
  |    "^\\([1-9]\\|[01][0-9]\\|2[0-3]\\):?\\([0-5][0-9]\\)?$"
  |    start-time-as-string)
  |   (let
  |       ((hour
  |         (string-to-number
  |          (or
  |           (match-string 1 start-time-as-string)
  |           "0")))
  |        (minute
  |         (string-to-number
  |          (or
  |           (match-string 2 start-time-as-string)
  |           "0"))))
  |     (org-schedule nil (format "today %02d:%02d"
  |                               hour
  |                               minute))
  |     (message (number-to-string hour))
  |     ))
  `----


* 6.12.4.4 Schedule task for duration

  ,----
  | (defun cashweaver-org--schedule-for (start-time end-time &optional date)
  |   (let ((date (or date "today")))
  |     (org-schedule nil (format "%s %s-%s"
  |                               date
  |                               start-time
  |                               end-time))))
  |     ;(org-schedule nil (format "%s %s-%s"
  |                               ;date
  |                               ;start-time
  |                               ;end-time))))
  `----

  ,----
  | (defun cashweaver-org--schedule-at-for-minutes (start-minute start-hour duration-in-minutes &optional date)
  |   (let* ((start-time-in-minutes-since-midnight
  |          (+ start-minute (* start-hour 60)))
  |         (end-time-in-minutes-since-midnight
  |          (+ start-time-in-minutes-since-midnight duration-in-minutes))
  |         (end-minute (mod end-time-in-minutes-since-midnight 60))
  |         (end-hour (/ end-time-in-minutes-since-midnight 60))
  |         (date (or date "today")))
  |     (org-schedule nil (format "%s %02d:%02d-%02d:%02d"
  |                               date
  |                               start-hour
  |                               start-minute
  |                               end-hour
  |                               end-minute))))
  `----


* 6.12.4.5 Scheduling task at start of pomodoro

  ,----
  | (setq
  |  cashweaver--schedule-pomodoro-one '(:start "09:00" :end "09:50")
  |  cashweaver--schedule-pomodoro-two '(:start "10:00" :end "10:50")
  |  cashweaver--schedule-pomodoro-three '(:start "11:00" :end "11:50")
  |  cashweaver--schedule-pomodoro-four '(:start "12:00" :end "12:50")
  |  cashweaver--schedule-pomodoro-five '(:start "13:00" :end "13:50")
  |  cashweaver--schedule-pomodoro-six '(:start "14:00" :end "14:50")
  |  cashweaver--schedule-pomodoro-seven '(:start "15:00" :end "15:50")
  |  cashweaver--schedule-pomodoro-eight '(:start "16:00" :end "16:50")
  |  cashweaver--schedule-pomodoro-nine '(:start "17:00" :end "17:50")
  |  cashweaver--schedule-pomodoro-ten '(:start "18:00" :end "18:50"))
  `----

  ,----
  | (defun cashweaver-org-schedule-at-pomodoro (pomodoro-time &optional date)
  |   (interactive)
  |   (let ((start-time (plist-get pomodoro-time :start)))
  |         (date (or date "today")))
  |     (org-schedule nil (format "%s %s"
  |                               date
  |                               start-time)))
  `----


* 6.12.4.6 Scheduling task in N hours

  ,----
  | (defun cashweaver-org-schedule-in-n-hours (offset-hours &optional date)
  |   (interactive)
  |   (let* ((time-list (parse-time-string (current-time-string)))
  |          (current-hour (nth 2 time-list))
  |          (current-minute (nth 1 time-list))
  |          (hour (mod (+ current-hour offset-hours) 24))
  |          (date (or date "today")))
  |     (org-schedule nil (format "%s %s:%s"
  |                               date
  |                               hour
  |                               current-minute))))
  `----


* 6.12.4.7 Scheduling task in N days

  ,----
  | (defun cashweaver-org-schedule-in-n-workdays (num-days &optional time)
  |   (interactive)
  |   (let*
  |       ((time (or time "09:00"))
  |        (offset-days))
  |     (org-schedule
  |      nil
  |      (format "%s %s"
  |              offset-days
  |              time))))
  `----


6.13 `org-noter'
~~~~~~~~~~~~~~~~

6.13.1 Package
--------------

  I've customized org-noter to [wrap quoted text with
  `begin_quote=/=end_quote']

  ,----
  | (package! org-noter
  |   :recipe (:host github
  |            :repo "cashweaver/org-noter"))
  `----


[wrap quoted text with `begin_quote=/=end_quote']
<https://github.com/cashweaver/org-noter/commit/e18a4314308d5dd211759682b1aeb083a822673d>


6.13.2 Config
-------------

  `org-noter' is configured by Doom.


6.14 `org-notmuch'
~~~~~~~~~~~~~~~~~~

6.14.1 Package
--------------

  ,----
  | (package! ol-notmuch
  |   :recipe `(:local-repo
  |             ,(concat
  |               cashweaver--local-package-path
  |               "/org-mode/contrib/lisp")
  |             :files
  |             ("ol-notmuch.el")))
  `----


6.14.2 Config
-------------

  ,----
  | (use-package! ol-notmuch
  |   :after org)
  `----


6.15 `org-roam'
~~~~~~~~~~~~~~~

6.15.1 Package
--------------

  `org-roam' is provided by `init.el'.


6.15.2 Config
-------------

  ,----
  | (defun cashweaver-org-roam-make-filepath (title &optional time time-zone)
  |   "Return a filenaem for an org-roam node.
  | 
  | Reference: https://ag91.github.io/blog/2020/11/12/write-org-roam-notes-via-elisp"
  |   (let ((timestamp
  |          (format-time-string
  |           "%Y%m%d%H%M%S"
  |           (or time
  |               (current-time))
  |           (or time-zone
  |               (current-time-zone))))
  |         (slug
  |          (org-roam-node-slug
  |           (org-roam-node-create
  |            :title title))))
  |     (format
  |      "%s/%s_%s.org"
  |      org-roam-directory
  |      timestamp
  |      slug)))
  | ;;(cashweaver-org-roam-make-filepath "This is the foo")
  | 
  | (defun cashweaver-org-mode-insert-option (option value)
  |   "Insert an org-mode option (#+OPTION: VALUE)."
  |   (interactive)
  |   (insert
  |    (format
  |     "#+%s: %s\n"
  |     option
  |     value)))
  | 
  | (defun cashweaver-org-mode-insert-options (options)
  |   "Insert an alist of org-mode options (#+OPTION: VALUE)."
  |   (interactive)
  |   (cl-loop for (option . value) in options
  |            do (cashweaver-org-mode-insert-option
  |                option
  |                value)))
  | 
  | (defun cashweaver-org-mode-insert-property (property value)
  |   "Insert an org-mode property (:PROPERTY: VALUE)."
  |   (interactive)
  |   (insert
  |    (format
  |     ":%s: %s\n"
  |     property
  |     value)))
  | 
  | (defun cashweaver-org-mode-insert-properties (properties)
  |   "Insert an alist of org-mode properties (:PROPERTY: VALUE).
  | 
  | When WRAP is non-nil: Wrap the properties with :PROPERTIES:/:END:."
  |   (interactive)
  |   (cl-loop for (property . value) in properties
  |            do (org-set-property
  |                property
  |                value)))
  | 
  | (defun cashweaver-org-roam-new-node (file-path title &optional properties)
  |   "Build a new org-roam node in a temp file.
  | 
  | PROPERTIES is expected to be an alist of additional properties to include.
  | 
  | Reference: https://ag91.github.io/blog/2020/11/12/write-org-roam-notes-via-elisp"
  |   (let* ((id (org-id-new))
  |          (all-properties
  |           (append
  |            `(("ID" . ,id)
  |              ("DIR" . ,cashweaver-org-roam-attachment-dir-path))
  |            properties)))
  |     (with-temp-file
  |         file-path
  |       (cashweaver-org-mode-insert-properties
  |        all-properties)
  |       (goto-char
  |        (point-max))
  |       (cashweaver-org-mode-insert-options
  |        `(("TITLE" . ,title)
  |          ("STARTUP" . "overview"))))))
  | 
  | (defun cashweaver-org-roam-new-node-from-link-heading-at-point (&optional mark-as-done)
  |   "Build a new org-roam node from the link heading at point."
  |   (interactive)
  |   (let* ((link
  |           (org-element-context))
  |          (type
  |           (org-element-property
  |            :type
  |            link))
  |          (url
  |           (org-element-property
  |            :raw-link
  |            link))
  |          (description
  |           (cashweaver-org-mode-get-description-from-link-at-point))
  |          (org-roam-node-file-path
  |           (cashweaver-org-roam-make-filepath description)))
  |     ;; TODO Replace with regexp?
  |     (unless (or (string= type "http")
  |                 (string= type "https")))
  |     (cashweaver-org-roam-new-node
  |      org-roam-node-file-path
  |      description
  |      `(("ROAM_REFS" . ,url)))
  |     (if mark-as-done
  |         (org-todo "DONE"))
  |     (find-file
  |      org-roam-node-file-path)))
  | 
  | (defun cashweaver-org-mode-get-description-from-link-at-point ()
  |   "Reference: https://emacs.stackexchange.com/a/38297"
  |   (interactive)
  |   (let ((link
  |          (org-element-context)))
  |     (message
  |      "%s"
  |      (buffer-substring-no-properties
  |       (org-element-property
  |        :contents-begin
  |        link)
  |       (org-element-property
  |        :contents-end
  |        link)))))
  | 
  | (defun cashweaver-org-roam-open-ref ()
  |   "Open the ROAM_REF."
  |   (interactive)
  |   (let ((roam-refs
  |          (org-entry-get
  |           (point)
  |           "ROAM_REFS")))
  |     (if (s-starts-with-p
  |          "http"
  |          roam-refs)
  |         (browse-url roam-refs)
  |       (message
  |        "Not an http(s) ref (%s)"
  |        roam-refs))))
  | 
  | (defun cashweaver-org-roam-insert-attachment-path ()
  |   (save-excursion
  |     (org-set-property
  |      "DIR"
  |      cashweaver-org-roam-attachment-dir-path)))
  | 
  | (use-package! org-roam
  |   :after org
  |   :config
  |   (setq
  |    org-roam-directory
  |    (file-truename
  |     "~/proj/roam")
  |    cashweaver-org-roam-attachment-dir-path
  |    (file-truename
  |     (format
  |      "%s/attachments"
  |      org-roam-directory))
  |    org-roam-capture-templates
  |    '(("d" "default" plain "%?" :target
  |       (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  |       :unnarrowed t)))
  |   (add-hook!
  |    'org-roam-capture-new-node-hook
  |    'cashweaver-org-roam-insert-attachment-path)
  |   (org-roam-db-autosync-mode))
  `----


6.16 `org-super-agenda'
~~~~~~~~~~~~~~~~~~~~~~~

6.16.1 Package
--------------

  ,----
  | (package! org-super-agenda)
  `----


6.17 `ox-pandoc'
~~~~~~~~~~~~~~~~

6.17.1 Package
--------------

  ,----
  | (package! ox-pandoc)
  `----


6.18 `pdf-tools'
~~~~~~~~~~~~~~~~

6.18.1 Package
--------------

  `pdf-tools' is provided by `init.el'.


6.18.2 Config
-------------

  ,----
  | (use-package! pdf-tools
  |   :config
  |   (pdf-tools-install))
  | 
  | (defun cashweaver-org-noter-insert-selected-text-inside-note-content ()
  |   (interactive)
  |   (progn (setq currenb (buffer-name))
  | 	 (org-noter-insert-precise-note)
  | 	 (set-buffer currenb)
  | 	 (org-noter-insert-note)
  | 	 ;;(org-noter-quote)
  |          ))
  | 
  | (fset 'org-noter-quote
  |    (kmacro-lambda-form [return S-f3 backspace ?# ?+ ?e ?n ?d ?_ ?q ?u ?o ?t ?e ?\C-r ?: ?e return ?\C-e return delete ?# ?+ ?b ?e ?g ?i ?n ?_ ?q ?u ?o ?t ?e] 1 "%d"))
  | 
  | (define-key pdf-view-mode-map (kbd "y") 'cashweaver-org-noter-insert-selected-text-inside-note-content)
  `----


6.19 `alert'
~~~~~~~~~~~~

6.19.1 Package
--------------

  `alert' is provided by Doom Emacs.


6.19.2 Config
-------------

  ,----
  | (setq
  |  alert-fade-time 60
  |  alert-default-style 'libnotify)
  `----


6.20 `ox-hugo'
~~~~~~~~~~~~~~

6.20.1 Package
--------------

  ,----
  | (package! ox-hugo)
  `----


6.20.2 Config
-------------

  ,----
  | (use-package! ox-hugo
  |   :after ox
  |   :ensure t)
  `----


6.21 `org-wild-notifier'
~~~~~~~~~~~~~~~~~~~~~~~~

6.21.1 Package
--------------

  ,----
  | (package! org-wild-notifier)
  `----


6.21.2 Config
-------------

  ,----
  | (use-package! org-wild-notifier
  |   :config
  |   (setq
  |    org-wild-notifier-alert-time '(10 2))
  |   (org-wild-notifier-mode))
  `----


7 Mail
======

  ,----
  | (defun cashweaver-send-mail-function ()
  |   )
  | 
  | 
  | (defun cashweaver-mail-htmlize-and-send-org-mail ()
  |   "Converts an org-mode message to HTML and sends."
  |   (message-mode))
  | 
  | (defun cashweaver-compose-mail-org ()
  |   (interactive)
  |   (compose-mail)
  |   (message-goto-body)
  |   (setq *compose-html-org* t)
  |   (org-mode))
  | 
  | (defun cashweaver-mail-toggle-org-message-mode ()
  |   (interactive)
  |   (if (derived-mode-p 'message-mode)
  |       (progn
  |         (setq *compose-html-org* t)
  |         (org-mode)
  |         (message "enabled org-mode"))
  |     (progn
  |       (setq *compose-html-org* nil)
  |       (notmuch-message-mode)
  |       (message "enabled notmuch-message-mode"))))
  | 
  | (defun cashweaver-htmlize-and-send-mail-org ()
  |   (interactive)
  |   (when *compose-html-org*
  |     (setq *compose-html-org* nil)
  |     (message-mode)
  |     (org-mime-htmlize)
  |     (message-send-and-exit)))
  | 
  | (setq
  |  send-mail-function #'google-sendgmr-send-it
  |  message-send-mail-function #'google-sendgmr-send-it)
  `----


8 Key bindings
==============

  Key bindings, in my experience, don't benefit from the same
  "tangle-like" style of spreading them throughout the config. I prefer
  to have my key bindings all in one place.

  ,----
  | ; Reference; https://www.emacswiki.org/emacs/DocumentingKeyBindingToLambda
  | (defun evil-lambda-key (mode keymap key def)
  |   "Wrap `evil-define-key' to provide documentation."
  |   (set 'sym (make-symbol (documentation def)))
  |   (fset sym def)
  |   (evil-define-key mode keymap key sym))
  `----


8.1 General
~~~~~~~~~~~

  ,----
  | (map!
  |  ;; Keep in alphabetical order.
  |  (:leader
  |   :desc "at point" :n "h h" #'helpful-at-point
  |   :desc "Store email link" :n "n L" #'org-notmuch-store-link
  |   :desc "Langtool" :n "t L" #'langtool-check))
  | 
  | (map!
  |  ;; Keep in alphabetical order.
  |  :map global-map
  |  "M-N" #'operate-on-number-at-point)
  `----


8.2 `org-mode'
~~~~~~~~~~~~~~

  ,----
  | (after! org
  |   ;; Keep in alphabetical order.
  |   (map!
  |    :map org-mode-map
  |    :localleader
  |    (:prefix ("b")
  |     :n "RET" #'org-table-copy-down)
  | 
  |    (:prefix ("d")
  |     (:prefix ("h" . "insert heading")
  |      :n "d" #'cashweaver-org-mode-insert-heading-for-today
  |      :n "w" #'cashweaver-org-mode-insert-heading-for-this-week)
  |     (:prefix ("S")
  |      (:prefix ("." . "today")
  |       :desc "at" :n "a" #'cashweaver-org--schedule-today-at)
  |      (:prefix ("h" . "hour")
  |       (:prefix ("1" . "1?:??")
  |        :desc "10:00" :n "0" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "10:00"
  |                                    "10:50"))
  |        :desc "11:00" :n "3" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "11:00"
  |                                    "11:50"))
  |        :desc "12:00" :n "2" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "12:00"
  |                                    "12:50"))
  |        :desc "13:00" :n "3" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "13:00"
  |                                    "13:50"))
  |        :desc "14:00" :n "4" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "14:00"
  |                                    "14:50"))
  |        :desc "15:00" :n "5" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "15:00"
  |                                    "15:50"))
  |        :desc "16:00" :n "6" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "16:00"
  |                                    "16:50"))
  |        :desc "17:00" :n "7" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "17:00"
  |                                    "17:50"))
  |        :desc "18:00" :n "8" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "18:00"
  |                                    "18:50"))
  |        :desc "19:00" :n "9" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "19:00"
  |                                    "19:50")))
  |       (:prefix ("2" . "2?:??")
  |        :desc "20:00" :n "0" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "20:00"
  |                                    "20:50"))
  |        :desc "21:00" :n "3" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "21:00"
  |                                    "21:50"))
  |        :desc "22:00" :n "2" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "22:00"
  |                                    "22:50"))
  |        :desc "23:00" :n "3" (cmd! (cashweaver-org-schedule-today-from-to
  |                                    "23:00"
  |                                    "23:50")))
  |       :desc "03:00" :n "3" (cmd! (cashweaver-org-schedule-today-from-to
  |                                   "03:00"
  |                                   "03:50"))
  |       :desc "04:00" :n "4" (cmd! (cashweaver-org-schedule-today-from-to
  |                                   "04:00"
  |                                   "04:50"))
  |       :desc "05:00" :n "5" (cmd! (cashweaver-org-schedule-today-from-to
  |                                   "05:00"
  |                                   "05:50"))
  |       :desc "06:00" :n "6" (cmd! (cashweaver-org-schedule-today-from-to
  |                                   "06:00"
  |                                   "06:50"))
  |       :desc "07:00" :n "7" (cmd! (cashweaver-org-schedule-today-from-to
  |                                   "07:00"
  |                                   "07:50"))
  |       :desc "08:00" :n "8" (cmd! (cashweaver-org-schedule-today-from-to
  |                                   "08:00"
  |                                   "08:50"))
  |       :desc "09:00" :n "9" (cmd! (cashweaver-org-schedule-today-from-to
  |                                   "09:00"
  |                                   "09:50")))))
  |    (:prefix ("M" . "Mail")
  |     :desc "switch to message-mode" :n "t" #'cashweaver-mail-toggle-org-message-mode)
  |    (:prefix ("m")
  |     :desc "Open ref" :n "O" #'cashweaver-org-roam-open-ref
  |     :desc "Create node from headline link" :n "N" (cmd! ()
  |                                                         (cashweaver-org-roam-new-node-from-link-heading-at-point
  |                                                          ;; mark-as-done
  |                                                          t)))
  |    (:prefix ("S" . "Structure")
  |     :n "i" #'org-insert-structure-template)))
  `----


8.3 `notmuch'
~~~~~~~~~~~~~

  ,----
  | (after! notmuch
  |   ;; Keep in alphabetical order.
  |   (map!
  |    :map notmuch-message-mode-map
  |    :localleader
  | 
  |    "M t" #'cashweaver-mail-toggle-org-message-mode)
  | 
  |   (map!
  |    :map notmuch-show-mode-map
  | 
  |    "M-RET" #'cashweaver-notmuch-show-open-or-close-all)
  | 
  |   ;; Reply-all should be the default.
  |   (evil-define-key 'normal notmuch-show-mode-map "cr" 'notmuch-show-reply)
  |   (evil-define-key 'normal notmuch-show-mode-map "cR" 'notmuch-show-reply-sender)
  | 
  |   ;; Easy archive for my most-used tags.
  |   (evil-define-key 'normal notmuch-search-mode-map "A" 'notmuch-search-archive-thread)
  |   (evil-define-key 'normal notmuch-search-mode-map "a" 'cashweaver-notmuch-search-super-archive)
  |   (evil-define-key 'visual notmuch-search-mode-map "a" 'cashweaver-notmuch-search-super-archive)
  | 
  |   ;; Unbind "t", and re-bind it to "T", so we can set it up as a prefix.
  |   (evil-define-key 'normal notmuch-search-mode-map "t" nil)
  |   (evil-define-key 'normal notmuch-search-mode-map "T" 'notmuch-search-filter-by-tag)
  | 
  |   ;; Helpers for toggling often-used tags.
  |   (evil-lambda-key 'normal notmuch-search-mode-map "t0" '(lambda ()
  |                                                            "Toggle p0"
  |                                                            (interactive)
  |                                                            (cashweaver-notmuch-search-toggle-tag "p0")))
  |   (evil-lambda-key 'normal notmuch-search-mode-map "tr" '(lambda ()
  |                                                            "Toggle Read!"
  |                                                            (interactive)
  |                                                            (cashweaver-notmuch-search-toggle-tag "Read!")))
  |   (evil-lambda-key 'normal notmuch-search-mode-map "tw" '(lambda ()
  |                                                            "Toggle waiting"
  |                                                            (interactive)
  |                                                            (cashweaver-notmuch-search-toggle-tag "waiting"))))
  | 

  `----


9 Load Additional Config Files
==============================

9.1 `config-work.el'
~~~~~~~~~~~~~~~~~~~~

  ,----
  | (if (cashweaver-is-work-p)
  |     (load (concat cashweaver-work-config-dir "/config-work.el")))
  `----


9.2 `packages-work.el'
~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (if (cashweaver-is-work-p)
  |     (load (concat cashweaver-work-config-dir "/packages-work.el")))
  `----



Footnotes
_________

[1] 1. [Diego Zamboni]
(<https://github.com/zzamboni/dot-doom/blob/master/doom.org>)
