:PROPERTIES:
:LAST_MODIFIED: [2024-08-07 Wed 11:30]
:END:
#+title: Emacs Config: Base
#+author: Cash Weaver
#+email: cashbweaver@gmail.com

* Overview

Welcome to my Emacs configuration! I've split my work and personal configuration files as (1) I need slighly different things in my work environment and (2) I depend on private plugins for work which I don't have the rights to publish. The work configuration files build on top of the personal ones.

* Introduction
** Literate Programming

My configuration files use literate programming. As an example of literate programming with =org-mode=, let's generate a throw-away file, =foo.md=. First, we'll add the title:

#+begin_example
,#+begin_src md :tangle foo.md
# Foo
,#+end_src
#+end_example

Notice that I specified the syntax (=md=) and the file to output the content to (=foo.md=). Next, let's add a list of my favorite colors.

#+begin_example
,#+begin_src md :tangle foo.md
1. Orange
1. Blue
1. Red
,#+end_src
#+end_example

Now we can run =org-babel-tangle= to extract the content of these two blocks and create =foo.md=. The newly generated =foo.md= will contain:

#+begin_example
,#+begin_src md
# Foo

1. Orange
1. Blue
1. Red
,#+end_src
#+end_example

** Function and Variable Naming Convention

I prefix all of my own functions and variables with =cashpw/= to prevent any unintentional overlaps.

#+begin_src emacs-lisp
(setq
 cashpw/favorite-color "orange")
#+end_src

"Private" functions and variables -- those I wouldn't indend to be accessed directly -- are prefixed with =cashpw/-= (note the two =-='s).

#+begin_src emacs-lisp
(setq
 cashpw/-secret-color "blue")
#+end_src

Additionally, variables and functions which are in a "library"/group are prefixed with either =cashpw/<library name>-= or =cashpw/<library name>--=, depending on their intended visibility.

#+begin_src emacs-lisp
(setq
 cashpw/colors-favorite "orange"
 cashpw/colors--secret "blue")
#+end_src

* =cashpw=

To start off, we'll define a [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Group-Definitions.html][group]] I use for my customizations:

#+name: cashpw
#+begin_src emacs-lisp
(defgroup cashpw
  nil
  "Group for my customizations and configurations.")
#+end_src

#+begin_src emacs-lisp :tangle config.el :noweb no-export
<<cashpw>>
#+end_src

#+begin_src emacs-lisp :tangle packages.el :noweb no-export
<<cashpw>>
#+end_src

* Utilities

#+name: k-time
#+begin_src emacs-lisp
(defmacro k-time (&rest body)
  "Measure and return the time it takes evaluating BODY.

https://akrl.sdf.org/#orgc15a10d"
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))
#+end_src

#+name: cashpw/load
#+begin_src emacs-lisp
(defun cashpw/load (path &optional)
  "Return non-nil after loading PATH."
  (cashpw/message
   "Loading %s ..."
   path)
  (cashpw/message
   "Loaded %s in %.06f seconds."
   path
   (k-time
    (load path)))
  t)
#+end_src

#+name: cashpw/error
#+begin_src emacs-lisp
(defun cashpw/error (error-message &rest args)
  (error
   "[cashpw] %s"
   (apply
    #'format
    error-message
    args)))
#+end_src

#+name: cashpw/message
#+begin_src emacs-lisp
(defun cashpw/message (format-string &rest args)
  "`message' with an identifier."
  (apply
   #'message
   (concat
    "[cashpw] "
    format-string)
   args))
#+end_src

#+begin_src emacs-lisp :tangle config.el :noweb no-export
<<cashpw/message>>
<<cashpw/error>>
<<cashpw/load>>
<<k-time>>
#+end_src

#+begin_src emacs-lisp :tangle packages.el :noweb no-export
<<cashpw/message>>
<<cashpw/error>>
<<cashpw/load>>
<<k-time>>
#+end_src

* Which machine?

#+name: cashpw/machine-p
#+begin_src emacs-lisp
(defun cashpw/machine-p (machine)
  "Return true if executed on my work machine."
  (pcase machine
    ('personal-phone
     (file-exists-p cashpw/path--personal-phone-id-file))
    ('personal
     (file-directory-p cashpw/path--personal-home-dir))
    ('work
     (file-directory-p cashpw/path--work-home-dir))
    ('work-cloudtop
     (file-exists-p cashpw/path--work-cloudtop-id-file))
    ('work-laptop
     (file-exists-p cashpw/path--work-laptop-id-file))
    (t
     (cashpw/error
      "Unknown machine: %s"
      machine))))
#+end_src

#+begin_src emacs-lisp :tangle config.el :noweb no-export
<<cashpw/machine-p>>
#+end_src

#+begin_src emacs-lisp :tangle packages.el :noweb no-export
<<cashpw/machine-p>>
#+end_src

* Paths

#+name: paths
#+begin_src emacs-lisp
(defvar cashpw/path--personal-home-dir
  "/home/cashweaver"
  "Path to home directory on my personal machine.")

(defvar cashpw/path--work-home-dir
  "/usr/local/google/home/cashweaver"
  "Path to home directory on my work machine(s).")

(defvar cashpw/path--work-cloudtop-id-file
  "/usr/local/google/home/cashweaver/is-cloudtop"
  "File that, when present, indicates the current machine is my Cloudtop instance.")

(defvar cashpw/path--work-laptop-id-file
  "/usr/local/google/home/cashweaver/is-work-laptop"
  "File that, when present, indicates the current machine is my Cloudtop instance.")

(defvar cashpw/path--personal-phone-home-dir
  "/data/data/com.termux/files/home"
  "Path to home directory on my personal phone.")

(defvar cashpw/path--personal-phone-id-file
  "/data/data/com.termux/files/home/is-phone"
  "File that, when present, indicates the current machine is my personal phone.")

(defvar cashpw/path--home-dir
  (cond
   ((cashpw/machine-p 'personal)
    cashpw/path--personal-home-dir)
   ((cashpw/machine-p 'personal-phone)
    cashpw/path--personal-phone-home-dir)
   ((cashpw/machine-p 'work)
    cashpw/path--work-home-dir)
   (t
    cashpw/path--personal-home-dir))
  "Path to home directory.")

(defvar cashpw/path--config-dir
  (format
   "%s/.config"
   cashpw/path--home-dir)
  "Full path to configuration files.")

(defvar cashpw/path--emacs-config-dir
  (format
   "%s/doom"
   cashpw/path--config-dir)
  "Full path to Emacs configuration files.")
#+end_src

#+RESULTS: cashpw/home-dir
: cashpw/path--emacs-config-dir

#+begin_src emacs-lisp :tangle config.el :noweb no-export
<<paths>>
#+end_src

#+begin_src emacs-lisp :tangle packages.el :noweb no-export
<<paths>>
#+end_src

* Load Additional Config Files

Configuration files should follow the naming convention =(config|packages)-<type>.el= (eg: =config-personal.el=).

** Personal

#+begin_src emacs-lisp :tangle packages.el :noweb no-export
(defcustom
  cashpw/personal-packages-loaded-p
  nil
  "Non-nil if my packages have finished loading."
  :group 'cashpw
  :type 'boolean)
(setq
 cashpw/personal-packages-loaded-p (cashpw/load
                                    (format
                                     "%s/packages-personal.el"
                                     cashpw/path--emacs-config-dir)))
#+end_src

#+begin_src emacs-lisp :tangle config.el :noweb no-export
(defcustom
  cashpw/personal-config-loaded-p
  nil
  "Non-nil if my config has finished loading."
  :group 'cashpw
  :type 'boolean)
(setq
 cashpw/personal-config-loaded-p (cashpw/load
                                  (format
                                   "%s/config-personal.el"
                                   cashpw/path--emacs-config-dir)))
#+end_src

** Work

#+begin_src emacs-lisp :tangle packages.el :noweb no-export
(when (cashpw/machine-p 'work-cloudtop)
  (defcustom
    cashpw/work-packages-loaded-p
    nil
    "Non-nil if my packages have finished loading."
    :group 'cashpw
    :type 'boolean)
  (setq
   cashpw/work-packages-loaded-p (cashpw/load
                                  (format
                                   "%s/packages-work.el"
                                   cashpw/path--emacs-config-dir))))
#+end_src

#+begin_src emacs-lisp :tangle config.el :noweb no-export
(when (cashpw/machine-p 'work-cloudtop)
  (defcustom
    cashpw/work-config-loaded-p
    nil
    "Non-nil if my config has finished loading."
    :group 'cashpw
    :type 'boolean)
  (setq
   cashpw/work-config-loaded-p (cashpw/load
                                (format
                                 "%s/config-work.el"
                                 cashpw/path--emacs-config-dir))))
#+end_src
